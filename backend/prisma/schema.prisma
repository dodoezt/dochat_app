generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  userId              Int                    @id @default(autoincrement())
  username            String?                @unique(map: "username_UNIQUE") @db.VarChar(20)
  provider            String                 @db.VarChar(255)
  email               String?                @unique(map: "email_UNIQUE") @db.VarChar(255)
  email_name          String?                @db.VarChar(255)
  phone_number        String?                @unique(map: "phone_number_UNIQUE") @db.VarChar(255)
  dial_code           String?                @db.VarChar(255)
  createdAt           DateTime               @db.DateTime(0)
  special_tags        Json?
  tags_used           Json?
  conversationMembers conversation_members[] @relation("UserConversationMembers")
  sentMessages        messages[]             @relation("UserSentMessages")

  @@map("users")
}

model conversation_members {
  id             Int           @id @default(autoincrement())
  userId         Int
  conversationId String        @db.VarChar(36)
  joinedAt       DateTime      @default(now()) @db.DateTime(0)
  user           users         @relation("UserConversationMembers", fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "conversation_members_ibfk_1")
  conversation   conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "conversation_members_ibfk_2")

  @@unique([userId, conversationId], map: "unique_member")
  @@index([conversationId], map: "conversationId")
  @@map("conversation_members")
}

model messages {
  id             String          @id @unique(map: "id_UNIQUE") @db.VarChar(36)
  content        String          @db.Text
  sentAt         DateTime        @default(now()) @db.DateTime(0)
  status         messages_status @default(NOT_DELIVERED)
  senderId       Int
  conversationId String          @db.VarChar(36)
  sender         users           @relation("UserSentMessages", fields: [senderId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_1")
  conversation   conversations   @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_2")

  @@index([conversationId], map: "conversationId")
  @@index([senderId], map: "senderId")
  @@map("messages")
}

model conversations {
  id        String                 @id @unique(map: "id_UNIQUE") @default(cuid()) @db.VarChar(36)
  isGroup   Boolean                @default(false)
  name      String?                @db.VarChar(100)
  createdAt DateTime               @default(now()) @db.DateTime(0)
  members   conversation_members[]
  messages  messages[]

  @@map("conversations")
}

model tags {
  id   Int       @id @default(autoincrement())
  name String    @unique(map: "name_UNIQUE") @db.VarChar(100)
  tier tags_tier @default(Common)
}

enum messages_status {
  NOT_DELIVERED
  DELIVERED
  SEEN
}

enum tags_tier {
  Common
  Kinda_Cool  @map("Kinda Cool")
  Absolute_OG @map("Absolute OG")
}
